// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model Organization {
  id                     String                  @id @default("single-org")
  name                   String
  tenantId               String?
  sharedMailbox          String?
  microsoftEntraCreds    Json?
  linkedInCreds          Json?
  users                  User[]
  leads                  Lead[]
  platforms              MarketingPlatform[]
  preferences            MicrosoftPreferences?
  linkedInPreferences    LinkedInPreferences?
  leadConfig             LeadConfiguration?      @relation("OrgToLeadConfig")
  emailTemplates         EmailTemplate[]
  AutoReplyConfigs       AutoReplyConfig[]
  linkedInPages          LinkedInPage[]
  linkedinCampaignConfig LinkedInCampaignConfig? @relation("OrgToCampaignConfig")
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt

  @@unique([id])
}

model LinkedInCampaignConfig {
  id              String          @id @default(uuid())
  orgId           String          @unique @default("single-org")
  organization    Organization    @relation("OrgToCampaignConfig", fields: [orgId], references: [id])
  syncInterval    String          @default("EVERY_15_MINUTES")
  adAccounts      AdAccount[]     @relation("LinkedInCampaignConfigToAdAccount")
  campaignGroups  CampaignGroup[] @relation("LinkedInCampaignConfigToCampaignGroup")
  autoSyncEnabled Boolean         @default(true)
  lastSyncedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model AdAccount {
  id                String                   @id
  organizationId    String
  linkedInPageId    String
  role              String // e.g., "CAMPAIGN_MANAGER", "ACCOUNT_BILLING_ADMIN"
  userUrn           String // Corresponds to 'user' in LinkedInAdAccountUser
  accountUrn        String
  changeAuditStamps Json // Stores created and lastModified stamps
  linkedInPage      LinkedInPage             @relation(fields: [linkedInPageId], references: [id], onDelete: Cascade)
  campaignGroups    CampaignGroup[]          @relation("AdAccountToCampaignGroup")
  campaignConfigs   LinkedInCampaignConfig[] @relation("LinkedInCampaignConfigToAdAccount")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  @@unique([organizationId, id])
  @@index([linkedInPageId])
}

model CampaignGroup {
  id                String                   @id
  adAccountId       String
  name              String
  urn               String?                  @unique
  status            CampaignStatus
  runSchedule       Json?
  test              Boolean
  changeAuditStamps Json
  totalBudget       Json?
  servingStatuses   String[]
  backfilled        Boolean
  accountUrn        String
  objectiveType     ObjectiveType?
  adAccount         AdAccount                @relation("AdAccountToCampaignGroup", fields: [adAccountId], references: [id], onDelete: Cascade)
  campaignConfigs   LinkedInCampaignConfig[] @relation("LinkedInCampaignConfigToCampaignGroup")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt

  @@index([adAccountId])
}

model LinkedInPage {
  id             String       @id @default(uuid())
  organizationId String
  pageId         String       @unique
  name           String
  vanityName     String?
  logoUrl        String?
  email          String
  websiteURL     String?
  description    String?
  logo           Json?
  coverPhoto     String?
  staffCount     String?
  specialties    String[]
  address        Json?
  adAccounts     AdAccount[]  @relation
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, pageId])
}

model MicrosoftPreferences {
  id              String       @id @default(uuid())
  orgId           String       @unique @default("single-org")
  organization    Organization @relation(fields: [orgId], references: [id])
  signInMethod    Boolean      @default(true)
  leadSyncEnabled Boolean      @default(false)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model LinkedInPreferences {
  id           String       @id @default(uuid())
  orgId        String       @unique @default("single-org")
  organization Organization @relation(fields: [orgId], references: [id])
  signInMethod Boolean      @default(false)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
}

model LeadConfiguration {
  id             String       @id @default(uuid())
  orgId          String       @unique @default("single-org")
  organization   Organization @relation("OrgToLeadConfig", fields: [orgId], references: [id])
  filters        String[]     @default(["inquiry", "interested", "quote", "sales", "meeting"])
  folders        Json // Format: { "[mailboxEmail]": ["folderId1", "folderId2"], ... }, e.g., {"shared@example.com": ["inbox", "junkemail"]}
  syncInterval   String       @default("EVERY_HOUR")
  excludedEmails String[]     @default([])
  specialEmails  String[]     @default([])
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model User {
  user_id                String                @id @default(uuid())
  firstName              String?
  lastName               String?
  email                  String                @unique
  password               String?
  orgId                  String                @default("single-org")
  organization           Organization          @relation(fields: [orgId], references: [id])
  phoneNumber            String?
  street                 String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  birthdate              DateTime?
  occupation             String?
  profileImage           String?
  lastLogin              DateTime?
  profilePicture         String?
  role                   Role                  @default(USER)
  status                 Status                @default(ACTIVE)
  refreshToken           String?
  googleId               String?               @unique
  microsoftId            String?               @unique
  linkedInProfile        LinkedInProfile?      @relation
  allowPersonalEmailSync Boolean               @default(false)
  assignedLeads          Lead[]                @relation("AssignedTo")
  password_tokens        PasswordResetToken[]
  credentials            PlatformCredentials[]
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
}

model LinkedInProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  linkedInId String   @unique
  email      String
  firstName  String?
  lastName   String?
  jobTitle   String?
  profileUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [user_id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum SyncStatus {
  CONNECTED
  SYNCING
  FAILED
  DISCONNECTED
}

model MarketingPlatform {
  platform_id    String                @id @default(uuid())
  platform_name  String
  orgId          String                @default("single-org")
  organization   Organization          @relation(fields: [orgId], references: [id])
  last_sync_time DateTime?
  sync_status    SyncStatus            @default(CONNECTED)
  campaigns      MarketingCampaign[]
  credentials    PlatformCredentials[]
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt

  @@unique([orgId, platform_name])
}

model PlatformCredentials {
  credential_id String            @id @default(uuid())
  platform      MarketingPlatform @relation(fields: [platform_id], references: [platform_id])
  platform_id   String
  user_id       String?
  user          User?             @relation(fields: [user_id], references: [user_id])
  type          String            @default("AUTH")
  access_token  String?
  refresh_token String?
  scopes        String[]
  expires_at    DateTime?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt

  @@unique([platform_id, user_id, type])
}

enum LeadStatus {
  NEW
  CONTACTED
  IN_PROGRESS
  CONVERTED
  CLOSED
}

model Lead {
  lead_id               String             @id @default(uuid())
  orgId                 String             @default("single-org")
  organization          Organization       @relation(fields: [orgId], references: [id])
  assignedToId          String?
  assignedTo            User?              @relation("AssignedTo", fields: [assignedToId], references: [user_id])
  source                String             @default("email")
  campaignId            String?
  campaign              Campaign?          @relation(fields: [campaignId], references: [id])
  name                  String
  email                 String
  phone                 String?
  company               String?
  job_title             String?
  initialConversationId String?
  conversations         LeadConversation[]
  status                LeadStatus
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt

  @@unique([orgId, email, initialConversationId], name: "org_id_email_initialConversationId_unique")
  @@index([orgId])
}

model LeadAttachment {
  id                  String            @id @default(uuid())
  conversationEmailId String
  fileName            String
  cloudinaryUrl       String
  createdAt           DateTime          @default(now())
  leadEmail           ConversationEmail @relation(fields: [conversationEmailId], references: [id], onDelete: Cascade)
}

model LeadConversation {
  id             String              @id @default(uuid())
  lead           Lead                @relation(fields: [leadId], references: [lead_id])
  leadId         String
  conversationId String
  emails         ConversationEmail[]
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
}

model ConversationEmail {
  id               String           @id @default(uuid())
  conversation     LeadConversation @relation(fields: [conversationId], references: [id])
  conversationId   String
  emailId          String           @unique
  subject          String
  body             String           @db.Text
  contentType      String
  from             Json
  to               Json
  cc               Json
  bcc              Json
  hasAttachments   Boolean
  receivedDateTime DateTime
  isIncoming       Boolean
  isThreadHead     Boolean          @default(false)
  inReplyTo        String?
  attachments      LeadAttachment[]
  created_at       DateTime         @default(now())
}

model EmailTemplate {
  id               String            @id @default(uuid())
  orgId            String
  name             String
  subject          String
  body             String
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organization     Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  autoReplyConfigs AutoReplyConfig[] @relation("TemplateToAutoReplyConfig")

  @@index([orgId])
}

model AutoReplyConfig {
  id              String        @id @default(uuid())
  orgId           String
  organization    Organization  @relation(fields: [orgId], references: [id])
  name            String
  description     String?
  triggerType     String
  triggerValue    String?
  templateId      String
  template        EmailTemplate @relation("TemplateToAutoReplyConfig", fields: [templateId], references: [id])
  mailbox         Boolean       @default(false)
  schedule        String?
  isActive        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  emailTemplateId String?
}

model SyncState {
  id           String   @id @default(uuid())
  orgId        String
  platform     String
  folderId     String
  mailboxEmail String
  deltaLink    String
  lastSyncedAt DateTime @default(now()) @updatedAt

  @@unique([orgId, mailboxEmail, folderId], name: "orgId_mailboxEmail_folderId_unique")
  @@index([orgId])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  COMPLETED
  DRAFT
  PENDING_DELETION
  CANCELED
}

enum ObjectiveType {
  BRAND_AWARENESS
  ENGAGEMENT
  JOB_APPLICANTS
  LEAD_GENERATION
  WEBSITE_CONVERSION
  WEBSITE_VISITS
  VIDEO_VIEWS
}

enum CampaignType {
  SPONSORED_UPDATES
  SPONSORED_INMAILS
  SPONSORED_CONTENT
  TEXT_AD
  DYNAMIC
  SPOTLIGHT
  EVENT
}

enum CostType {
  CPM
  CPC
  CPV
}

enum Format {
  CAROUSEL
  FOLLOW_COMPANY
  JOBS
  SINGLE_VIDEO
  SPONSORED_INMAIL
  SPONSORED_MESSAGE
  SPONSORED_UPDATE_EVENT
  SPOTLIGHT
  STANDARD_UPDATE
  TEXT_AD
  UNSUPPORTED
}

enum OptimizationTargetType {
  NONE
  MAX_CLICK
  MAX_IMPRESSION
  MAX_CONVERSION
  MAX_LEAD
  MAX_LANDING_PAGE_VIEW
  MAX_REACH
}

model MarketingCampaign {
  campaign_id              String                  @id @default(uuid())
  campaign_name            String
  platform                 MarketingPlatform?      @relation(fields: [platform_id], references: [platform_id])
  platform_id              String?
  external_id              String?                 @unique
  ad_account_id            String?
  campaign_group_id        String?
  associated_entity        String?
  objective                ObjectiveType?
  type                     CampaignType?
  optimization_target_type OptimizationTargetType?
  format                   Format?
  status                   CampaignStatus          @default(DRAFT)
  creative_selection       String?
  serving_statuses         String[]
  budget                   Float?
  total_budget             Float?
  unit_cost                Float?
  cost_type                CostType?
  currency_code            String?
  start_date               DateTime
  end_date                 DateTime?
  audience_expansion       Boolean                 @default(false)
  offsite_delivery_enabled Boolean?                @default(false)
  pacing_strategy          String?
  locale                   String?
  version_tag              String?
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  performances             CampaignPerformance[]
  data                     Json?
}

model LinkedInMetadata {
  id                           String   @id @default(uuid())
  org_id                       String
  platform_id                  String
  targeting_industries         Json? // [{ name: "Technology", value: "urn:li:industry:11" }, ...]
  targeting_locations          Json? // [{ name: "United States", value: "urn:li:geo:100459316" }, ...]
  targeting_seniorities        Json? // [{ name: "Senior", value: "urn:li:seniority:8" }, ...]
  targeting_titles             Json? // [{ name: "Software Engineer", value: "urn:li:title:114" }, ...]
  targeting_staff_count_ranges Json? // [{ name: "1-10", value: "urn:li:staffCountRange:(1,10)" }, ...]
  targeting_locales            Json? // [{ name: "English (US)", value: "urn:li:locale:en_US" }, ...]
  last_updated                 DateTime @updatedAt

  @@unique([org_id, platform_id])
}

model Campaign {
  id          String   @id @default(uuid())
  name        String
  description String?
  platform    String
  leads       Lead[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([name, platform])
}

model CampaignPerformance {
  performance_id String            @id @default(uuid())
  campaign       MarketingCampaign @relation(fields: [campaign_id], references: [campaign_id])
  campaign_id    String
  clicks         Int               @default(0)
  impressions    Int               @default(0)
  conversions    Int               @default(0)
  cost           Float
  roi            Float
  leads          Int               @default(0)
  reach          Int               @default(0)
  date           DateTime
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
}
