// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model Organization {
  id                     String                  @id @default("single-org")
  name                   String
  tenantId               String?
  sharedMailbox          String?
  microsoftEntraCreds    Json?
  linkedInCreds          Json?
  googleCreds            Json?
  users                  User[]
  leads                  Lead[]
  platforms              MarketingPlatform[]
  preferences            MicrosoftPreferences?
  linkedInPreferences    LinkedInPreferences?
  leadConfig             LeadConfiguration?      @relation("OrgToLeadConfig")
  emailTemplates         EmailTemplate[]
  AutoReplyConfigs       AutoReplyConfig[]
  linkedInPages          LinkedInPage[]
  linkedinCampaignConfig LinkedInCampaignConfig? @relation("OrgToCampaignConfig")
  GoogleAccount          GoogleAccount[]

  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  GoogleCampaignConfig GoogleCampaignConfig[] @relation("OrgToCampaignConfig")

  @@unique([id])
}

model GoogleAccount {
  id                   String                 @id @default(uuid())
  orgId                String
  platformId           String
  mccId                String
  descriptiveName      String?
  currencyCode         String?
  timeZone             String?
  clientAccounts       Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  organization         Organization           @relation(fields: [orgId], references: [id])
  GoogleCampaignConfig GoogleCampaignConfig[] @relation("GoogleCampaignConfigToAdAccount")

  @@unique([orgId, mccId])
}

model LinkedInCampaignConfig {
  id              String          @id @default(uuid())
  orgId           String          @unique @default("single-org")
  organization    Organization    @relation("OrgToCampaignConfig", fields: [orgId], references: [id])
  syncInterval    String          @default("EVERY_HOUR")
  adAccounts      AdAccount[]     @relation("LinkedInCampaignConfigToAdAccount")
  campaignGroups  CampaignGroup[] @relation("LinkedInCampaignConfigToCampaignGroup")
  autoSyncEnabled Boolean         @default(true)
  lastSyncedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model GoogleCampaignConfig {
  id              String          @id @default(uuid())
  orgId           String          @unique @default("single-org")
  organization    Organization    @relation("OrgToCampaignConfig", fields: [orgId], references: [id])
  syncInterval    String          @default("EVERY_HOUR")
  googleAccounts  GoogleAccount[] @relation("GoogleCampaignConfigToAdAccount")
  autoSyncEnabled Boolean         @default(true)
  lastSyncedAt    DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model AdAccount {
  id                String                   @id
  organizationId    String
  linkedInPageId    String
  role              String
  userUrn           String
  accountUrn        String
  name              String?
  status            String?
  type              String?
  currency          String?
  test              Boolean?
  servingStatuses   String[]
  changeAuditStamps Json
  linkedInPage      LinkedInPage             @relation(fields: [linkedInPageId], references: [id], onDelete: Cascade)
  campaignGroups    CampaignGroup[]          @relation("AdAccountToCampaignGroup")
  campaignConfigs   LinkedInCampaignConfig[] @relation("LinkedInCampaignConfigToAdAccount")
  audienceTemplates AudienceTemplates[]      @relation("AdAccountToAudienceTemplates")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  campaigns         MarketingCampaign[]      @relation

  @@unique([organizationId, id])
  @@index([linkedInPageId])
}

model AudienceTemplates {
  id                     String    @id
  adAccountId            String
  adAccount              AdAccount @relation("AdAccountToAudienceTemplates", fields: [adAccountId], references: [id], onDelete: Cascade)
  account                String
  targetingCriteria      Json
  name                   String
  description            String?
  approximateMemberCount BigInt?
  created                DateTime
  lastModified           DateTime
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  @@index([adAccountId])
}

model CampaignGroup {
  id                String                   @id
  adAccountId       String
  name              String
  urn               String?                  @unique
  status            CampaignStatus
  runSchedule       Json?
  test              Boolean
  changeAuditStamps Json
  totalBudget       Json?
  servingStatuses   String[]
  backfilled        Boolean
  accountUrn        String
  objectiveType     ObjectiveType?
  adAccount         AdAccount                @relation("AdAccountToCampaignGroup", fields: [adAccountId], references: [id], onDelete: Cascade)
  campaignConfigs   LinkedInCampaignConfig[] @relation("LinkedInCampaignConfigToCampaignGroup")
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  campaigns         MarketingCampaign[]      @relation

  @@index([adAccountId])
}

model LinkedInPage {
  id             String       @id @default(uuid())
  organizationId String
  pageId         String       @unique
  name           String
  vanityName     String?
  logoUrl        String?
  email          String
  websiteURL     String?
  description    String?
  logo           Json?
  coverPhoto     String?
  staffCount     String?
  specialties    String[]
  address        Json?
  adAccounts     AdAccount[]  @relation
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, pageId])
}

model MicrosoftPreferences {
  id              String       @id @default(uuid())
  orgId           String       @unique @default("single-org")
  organization    Organization @relation(fields: [orgId], references: [id])
  signInMethod    Boolean      @default(true)
  leadSyncEnabled Boolean      @default(false)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model LinkedInPreferences {
  id           String       @id @default(uuid())
  orgId        String       @unique @default("single-org")
  organization Organization @relation(fields: [orgId], references: [id])
  signInMethod Boolean      @default(false)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
}

model LeadConfiguration {
  id             String       @id @default(uuid())
  orgId          String       @unique @default("single-org")
  organization   Organization @relation("OrgToLeadConfig", fields: [orgId], references: [id])
  filters        String[]     @default(["inquiry", "interested", "quote", "sales", "meeting"])
  folders        Json // Format: { "[mailboxEmail]": ["folderId1", "folderId2"], ... }, e.g., {"shared@example.com": ["inbox", "junkemail"]}
  syncInterval   String       @default("EVERY_HOUR")
  excludedEmails String[]     @default([])
  specialEmails  String[]     @default([])
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
}

model User {
  user_id                String                  @id @default(uuid())
  firstName              String?
  lastName               String?
  email                  String                  @unique
  password               String?
  orgId                  String                  @default("single-org")
  organization           Organization            @relation(fields: [orgId], references: [id])
  phoneNumber            String?
  street                 String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  birthdate              DateTime?
  occupation             String?
  profileImage           String?
  lastLogin              DateTime?
  profilePicture         String?
  role                   Role                    @default(USER)
  status                 Status                  @default(ACTIVE)
  refreshToken           String?
  googleId               String?                 @unique
  microsoftId            String?                 @unique
  linkedInProfile        LinkedInProfile?        @relation
  allowPersonalEmailSync Boolean                 @default(false)
  assignedLeads          Lead[]                  @relation("AssignedTo")
  password_tokens        PasswordResetToken[]
  credentials            PlatformCredentials[]
  notificationPreference NotificationPreference?
  notifications          Notification[]
  created_at             DateTime                @default(now())
  updated_at             DateTime                @updatedAt
}

model NotificationPreference {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [user_id])

  // Lead generation notifications
  receiveNewLead Boolean @default(true)

  // Campaign lifecycle notifications
  receiveCampaignLaunched Boolean @default(true)
  receiveCampaignPaused   Boolean @default(true)
  receiveCampaignFailed   Boolean @default(true)

  // Performance / budget alerts
  receivePerformanceAlert Boolean @default(true)
  receiveBudgetAlert      Boolean @default(true)

  // Sync status
  receiveSyncSuccess Boolean @default(true)
  receiveSyncFailure Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [user_id])

  title      String
  message    String
  type       String // e.g., "info", "success", "warning", "error", or domain-specific types like "invoice", "stock"
  actionUrl  String? // optional link user can follow
  seen       Boolean @default(false)
  isCritical Boolean @default(false) // prevent disabling if needed
  meta       Json? // optional: store extra info like related IDs, payloads

  createdAt DateTime  @default(now())
  readAt    DateTime? // optional: track when it was seen/read
}

model LinkedInProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  linkedInId String   @unique
  email      String
  firstName  String?
  lastName   String?
  jobTitle   String?
  profileUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [user_id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum SyncStatus {
  CONNECTED
  SYNCING
  FAILED
  DISCONNECTED
}

model MarketingPlatform {
  platform_id    String                @id @default(uuid())
  platform_name  String
  orgId          String                @default("single-org")
  organization   Organization          @relation(fields: [orgId], references: [id])
  last_sync_time DateTime?
  sync_status    SyncStatus            @default(CONNECTED)
  campaigns      MarketingCampaign[]
  credentials    PlatformCredentials[]
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt
  GoogleCampaign GoogleCampaign[]

  @@unique([orgId, platform_name])
}

model PlatformCredentials {
  credential_id String            @id @default(uuid())
  platform      MarketingPlatform @relation(fields: [platform_id], references: [platform_id])
  platform_id   String
  user_id       String?
  user          User?             @relation(fields: [user_id], references: [user_id])
  type          String            @default("AUTH")
  access_token  String?
  refresh_token String?
  scopes        String[]
  expires_at    DateTime?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt

  @@unique([platform_id, user_id, type])
}

enum LeadStatus {
  NEW
  CONTACTED
  IN_PROGRESS
  CONVERTED
  CLOSED
}

model Lead {
  lead_id               String             @id @default(uuid())
  orgId                 String             @default("single-org")
  organization          Organization       @relation(fields: [orgId], references: [id])
  assignedToId          String?
  assignedTo            User?              @relation("AssignedTo", fields: [assignedToId], references: [user_id])
  source                String             @default("email")
  campaignId            String?
  campaign              Campaign?          @relation(fields: [campaignId], references: [id])
  name                  String
  email                 String
  phone                 String?
  company               String?
  job_title             String?
  initialConversationId String?
  conversations         LeadConversation[]
  status                LeadStatus
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt

  @@unique([orgId, email, initialConversationId], name: "org_id_email_initialConversationId_unique")
  @@index([orgId])
}

model LeadAttachment {
  id                  String            @id @default(uuid())
  conversationEmailId String
  fileName            String
  cloudinaryUrl       String
  createdAt           DateTime          @default(now())
  leadEmail           ConversationEmail @relation(fields: [conversationEmailId], references: [id], onDelete: Cascade)
}

model LeadConversation {
  id             String              @id @default(uuid())
  lead           Lead                @relation(fields: [leadId], references: [lead_id])
  leadId         String
  conversationId String
  emails         ConversationEmail[]
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
}

model ConversationEmail {
  id               String           @id @default(uuid())
  conversation     LeadConversation @relation(fields: [conversationId], references: [id])
  conversationId   String
  emailId          String           @unique
  subject          String
  body             String           @db.Text
  contentType      String
  from             Json
  to               Json
  cc               Json
  bcc              Json
  hasAttachments   Boolean
  receivedDateTime DateTime
  isIncoming       Boolean
  isThreadHead     Boolean          @default(false)
  inReplyTo        String?
  attachments      LeadAttachment[]
  created_at       DateTime         @default(now())
}

model EmailTemplate {
  id               String            @id @default(uuid())
  orgId            String
  name             String
  subject          String
  body             String
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organization     Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  autoReplyConfigs AutoReplyConfig[] @relation("TemplateToAutoReplyConfig")

  @@index([orgId])
}

model AutoReplyConfig {
  id              String        @id @default(uuid())
  orgId           String
  organization    Organization  @relation(fields: [orgId], references: [id])
  name            String
  description     String?
  triggerType     String
  triggerValue    String?
  templateId      String
  template        EmailTemplate @relation("TemplateToAutoReplyConfig", fields: [templateId], references: [id])
  mailbox         Boolean       @default(false)
  schedule        String?
  isActive        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  emailTemplateId String?
}

model SyncState {
  id           String   @id @default(uuid())
  orgId        String
  platform     String
  folderId     String
  mailboxEmail String
  deltaLink    String
  lastSyncedAt DateTime @default(now()) @updatedAt

  @@unique([orgId, mailboxEmail, folderId], name: "orgId_mailboxEmail_folderId_unique")
  @@index([orgId])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  COMPLETED
  DRAFT
  PENDING_DELETION
  CANCELED
}

enum ObjectiveType {
  BRAND_AWARENESS
  ENGAGEMENT
  JOB_APPLICANTS
  LEAD_GENERATION
  WEBSITE_CONVERSION
  WEBSITE_VISITS
  VIDEO_VIEWS
}

enum CampaignType {
  SPONSORED_UPDATES
  SPONSORED_INMAILS
  SPONSORED_CONTENT
  TEXT_AD
  DYNAMIC
  SPOTLIGHT
  EVENT_AD
}

enum CostType {
  CPM
  CPC
  CPV
}

enum Format {
  CAROUSEL
  FOLLOW_COMPANY
  JOBS
  SINGLE_VIDEO
  SPONSORED_INMAIL
  SPONSORED_MESSAGE
  SPONSORED_UPDATE_EVENT
  SPOTLIGHT
  STANDARD_UPDATE
  TEXT_AD
  UNSUPPORTED
}

enum OptimizationTargetType {
  NONE
  MAX_CLICK
  MAX_IMPRESSION
  MAX_CONVERSION
  MAX_LEAD
  MAX_LANDING_PAGE_VIEW
  MAX_REACH
  MAX_VIDEO_VIEW
}

model MarketingCampaign {
  campaign_id              String                  @id @default(uuid())
  campaign_name            String
  platform                 MarketingPlatform?      @relation(fields: [platform_id], references: [platform_id])
  platform_id              String?
  external_id              String?                 @unique
  ad_account_id            String?
  campaign_group_id        String?
  associated_entity        String?
  objective                ObjectiveType?
  type                     CampaignType?
  optimization_target_type OptimizationTargetType?
  format                   Format?
  status                   CampaignStatus          @default(DRAFT)
  creative_selection       String?
  serving_statuses         String[]
  budget                   Float?
  total_budget             Float?
  unit_cost                Float?
  cost_type                CostType?
  currency_code            String?
  start_date               DateTime
  end_date                 DateTime?
  audience_expansion       Boolean                 @default(false)
  offsite_delivery_enabled Boolean?                @default(false)
  pacing_strategy          String?
  locale                   String?
  version_tag              String?
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  Ads                      Ad[]
  performances             CampaignAnalytics[]
  data                     Json?
  AdAccount                AdAccount?              @relation(fields: [ad_account_id], references: [id])
  CampaignGroup            CampaignGroup?          @relation(fields: [campaign_group_id], references: [id])

  @@index([ad_account_id])
  @@index([campaign_group_id])
}

model Ad {
  id                  String            @id @unique
  campaignId          String
  campaign            MarketingCampaign @relation(fields: [campaignId], references: [campaign_id], onDelete: Cascade)
  adAccountId         String?
  content             String?
  inlineContent       String?
  name                String?
  intendedStatus      String?
  isServing           Boolean?
  servingHoldReasons  String[]          @default([])
  leadgenCallToAction Json?
  reviewStatus        String?
  rejectionReasons    String[]          @default([])
  createdAt           DateTime?
  lastModifiedAt      DateTime?
  createdBy           String?
  lastModifiedBy      String?
  eventAd             Json?
  isTest              Boolean?          @default(false)
  changeAuditStamps   Json?
  AdAnalytics         AdAnalytics[]
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt

  @@unique([campaignId, id])
  @@index([campaignId])
  @@index([adAccountId])
}

model AdAnalytics {
  id                         String   @id @default(uuid())
  ad                         Ad       @relation(fields: [adId], references: [id])
  adId                       String
  dateFetched                DateTime
  timeGranularity            String
  datePeriodStart            DateTime
  datePeriodEnd              DateTime
  impressions                Int?
  clicks                     Int?
  costInUsd                  Float?
  conversions                Int?
  qualifiedLeads             Int?
  landingPageClicks          Int?
  costInLocalCurrency        Float?
  costPerQualifiedLead       Float?
  externalWebsiteConversions Int?
  reactions                  Int?
  shares                     Int?
  follows                    Int?
  videoViews                 Int?
  videoCompletions           Int?
  comments                   Int?
  averageDwellTime           Float? // seconds or ms (define in docs or API layer)
  cardClicks                 Int?
  revenueWonUsd              Float? // Added to match CampaignAnalytics
  returnOnAdSpend            Float? // Added to match CampaignAnalytics
  createdAt                  DateTime @default(now())

  @@unique([adId, datePeriodStart, datePeriodEnd, timeGranularity])
  @@index([adId, datePeriodStart, datePeriodEnd, timeGranularity])
}

model LinkedInMetadata {
  id                           String   @id @default(uuid())
  org_id                       String
  platform_id                  String
  targeting_industries         Json?
  targeting_locations          Json?
  targeting_seniorities        Json?
  targeting_titles             Json?
  targeting_staff_count_ranges Json?
  targeting_locales            Json?
  last_updated                 DateTime @updatedAt

  @@unique([org_id, platform_id])
}

model Campaign {
  id          String   @id @default(uuid())
  name        String
  description String?
  platform    String
  leads       Lead[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([name, platform])
}

model CampaignAnalytics {
  id                         String            @id @default(uuid())
  campaign                   MarketingCampaign @relation(fields: [campaign_id], references: [campaign_id])
  campaign_id                String
  dateFetched                DateTime
  timeGranularity            String
  datePeriodStart            DateTime
  datePeriodEnd              DateTime
  impressions                Int?
  clicks                     Int?
  costInUsd                  Float?
  conversions                Int?
  qualifiedLeads             Int?
  revenueWonUsd              Float?
  returnOnAdSpend            Float?
  landingPageClicks          Int?
  costInLocalCurrency        Float?
  costPerQualifiedLead       Float?
  externalWebsiteConversions Int?
  reactions                  Int?
  shares                     Int?
  follows                    Int?
  videoViews                 Int?
  videoCompletions           Int?
  comments                   Int?
  averageDwellTime           Float?
  cardClicks                 Int?
  createdAt                  DateTime          @default(now())

  @@unique([campaign_id, datePeriodStart, datePeriodEnd, timeGranularity])
  @@index([campaign_id, datePeriodStart, datePeriodEnd, timeGranularity])
}

model CampaignTemplate {
  id           String        @id @default(uuid())
  objective    ObjectiveType
  name         String
  description  String?
  config       Json // holds all fields: format, type, cost_type, etc.
  targeting    Json // flattened subset of `data` (industries, region...)
  score        Float // composite performance score
  source_count Int // how many campaigns this is based on
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
}

enum GoogleCampaignStatus {
  ENABLED
  PAUSED
  REMOVED
}

enum GoogleCampaignPrimaryStatus {
  ELIGIBLE
  ENDED
  LEARNING
  LIMITED
  MISCONFIGURED
  NOT_ELIGIBLE
  PAUSED
  PENDING
  REMOVED
  UNKNOWN
  UNSPECIFIED
}

enum GoogleObjectiveType {
  SALES
  LEADS
  WEBSITE_TRAFFIC
  APP_PROMOTION
  AWARENESS
}

enum GoogleAdvertisingChannelType {
  DEMAND_GEN
  DISPLAY
  HOTEL
  LOCAL
  LOCAL_SERVICES
  MULTI_CHANNEL
  PERFORMANCE_MAX
  SEARCH
  SHOPPING
  SMART
  TRAVEL
  UNKNOWN
  UNSPECIFIED
  VIDEO
}

enum GoogleBudgetDeliveryMethod {
  STANDARD
  ACCELERATED
}

enum GoogleServingStatus {
  ENDED
  NONE
  PENDING
  SERVING
  SUSPENDED
  UNKNOWN
  UNSPECIFIED
}

enum GoogleGeoTargetType {
  PRESENCE_OR_INTEREST
  PRESENCE
  SEARCH_INTEREST
}

enum GoogleAdGroupStatus {
  ENABLED
  PAUSED
  REMOVED
}

enum GoogleAdStatus {
  ENABLED
  PAUSED
  REMOVED
}

enum GoogleAdType {
  RESPONSIVE_SEARCH_AD
  EXPANDED_TEXT_AD
  RESPONSIVE_DISPLAY_AD
  VIDEO_AD
  SHOPPING_PRODUCT_AD
}

enum GoogleAdGroupRotation {
  OPTIMIZE
  ROTATE_FOREVER
  UNKNOWN
  UNSPECIFIED
}

enum PaymentMode {
  CLICKS
  CONVERSIONS
  CONVERSION_VALUE
  GUEST_STAY
  UNKNOWN
  UNSPECIFIED
}

// GoogleCampaign Model
model GoogleCampaign {
  campaign_id                    String                        @id @unique
  campaign_name                  String
  platform                       MarketingPlatform?            @relation(fields: [platform_id], references: [platform_id])
  platform_id                    String?
  customer_account_id            String // e.g., 8917543254
  objective_type                 GoogleObjectiveType?
  advertising_channel_type       GoogleAdvertisingChannelType?
  status                         GoogleCampaignStatus          @default(PAUSED)
  serving_status                 GoogleServingStatus?          @default(NONE)
  bidding_strategy_type          String?
  bidding_strategy_system_status String?
  payment_mode                   PaymentMode?
  primary_status                 GoogleCampaignPrimaryStatus?
  primary_status_reasons         String[]
  campaign_budget                Json? // e.g., { resourceName: "customers/8917543254/campaignBudgets/14714653596", amount_micros: 10000000, delivery_method: "STANDARD" }
  network_settings               Json? // e.g., { targetGoogleSearch: true, targetSearchNetwork: true, targetContentNetwork: false, targetPartnerSearchNetwork: false }
  geo_target_type_setting        Json? // e.g., { positiveGeoTargetType: "PRESENCE_OR_INTEREST", negativeGeoTargetType: "PRESENCE" }
  target_cpa_micros              Float? // Target CPA in micros
  target_roas                    Float? // Target ROAS (e.g., 5.0 for 500%)
  geo_targets                    Json? // e.g., { include: [{ value: "1000", text: "United States" }], exclude: [] }
  languages                      Json? // e.g., { include: [{ value: "1000", text: "English" }], exclude: [] }
  audience_settings              Json? // e.g., { ageRanges: [], genders: [], userLists: [] }
  start_date                     DateTime?
  end_date                       DateTime?
  created_at                     DateTime                      @default(now())
  updated_at                     DateTime                      @updatedAt
  ad_groups                      GoogleAdGroup[] // One-to-many with GoogleAdGroup
  data                           Json? // Raw API response for additional fields

  @@index([customer_account_id])
}

// GoogleAdGroup Model
model GoogleAdGroup {
  ad_group_id        String                 @id @unique
  campaign_id        String
  campaign           GoogleCampaign         @relation(fields: [campaign_id], references: [campaign_id])
  ad_rotation_mode   GoogleAdGroupRotation?
  name               String
  status             GoogleAdGroupStatus    @default(PAUSED)
  cpc_bid_micros     Float? // CPC bid in micros
  cpm_bid_micros     Float? // CPM bid in micros
  target_cpa_micros  Float? // Target CPA for ad group
  target_cpm_micros  Float? // Target CPM for ad group
  targeting_settings Json? // e.g., { keywords: [], placements: [], audiences: [] }
  created_at         DateTime               @default(now())
  updated_at         DateTime               @updatedAt
  ads                GoogleAd[] // One-to-many with GoogleAd
  data               Json? // Raw API response for additional fields

  @@index([campaign_id])
}

// GoogleAd Model
model GoogleAd {
  ad_id       String         @id @unique
  ad_group_id String
  ad_group    GoogleAdGroup  @relation(fields: [ad_group_id], references: [ad_group_id])
  status      GoogleAdStatus @default(PAUSED)
  ad_type     GoogleAdType?
  ad_content  Json? // e.g., { headlines: [], descriptions: [], final_urls: [] }
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  data        Json? // Raw API response for additional fields

  @@index([ad_group_id])
}
