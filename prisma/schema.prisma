// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model Organization {
  id               String                @id @default("single-org")
  name             String
  tenantId         String?
  sharedMailbox    String?
  microsoftEntraCreds Json?
  users            User[]
  leads            Lead[]
  platforms        MarketingPlatform[]
  preferences      MicrosoftPreferences?
  leadConfig       LeadConfiguration?    @relation("OrgToLeadConfig")
  emailTemplates   EmailTemplate[]
  AutoReplyConfigs AutoReplyConfig[]
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt

  @@unique([id])
}

model MicrosoftPreferences {
  id              String       @id @default(uuid())
  orgId           String       @unique @default("single-org")
  organization    Organization @relation(fields: [orgId], references: [id])
  signInMethod    Boolean      @default(true)
  leadSyncEnabled Boolean      @default(false)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model LeadConfiguration {
  id           String       @id @default(uuid())
  orgId        String       @unique @default("single-org")
  organization Organization @relation("OrgToLeadConfig", fields: [orgId], references: [id])
  filters      String[]     @default(["inquiry", "interested", "quote", "sales", "meeting"])
  folders      Json         @default("{\"inbox\": \"Inbox\", \"junkemail\": \"Junk\"}")
  syncInterval String       @default("EVERY_HOUR")
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
}

model User {
  user_id                String                @id @default(uuid())
  firstName              String?
  lastName               String?
  email                  String                @unique
  password               String?
  orgId                  String                @default("single-org")
  organization           Organization          @relation(fields: [orgId], references: [id])
  phoneNumber            String?
  street                 String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  birthdate              DateTime?
  occupation             String?
  profileImage           String?
  lastLogin              DateTime?
  profilePicture         String?
  role                   Role                  @default(USER)
  status                 Status                @default(ACTIVE)
  refreshToken           String?
  googleId               String?               @unique
  microsoftId            String?               @unique
  allowPersonalEmailSync Boolean               @default(false)
  assignedLeads          Lead[]                @relation("AssignedTo")
  password_tokens        PasswordResetToken[]
  credentials            PlatformCredentials[]
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum SyncStatus {
  CONNECTED
  SYNCING
  FAILED
  DISCONNECTED
}

model MarketingPlatform {
  platform_id    String                @id @default(uuid())
  platform_name  String
  orgId          String                @default("single-org")
  organization   Organization          @relation(fields: [orgId], references: [id])
  last_sync_time DateTime?
  sync_status    SyncStatus            @default(CONNECTED)
  campaigns      MarketingCampaign[]
  credentials    PlatformCredentials[]
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt

  @@unique([orgId, platform_name])
}

model PlatformCredentials {
  credential_id String            @id @default(uuid())
  platform      MarketingPlatform @relation(fields: [platform_id], references: [platform_id])
  platform_id   String
  user_id       String?
  user          User?             @relation(fields: [user_id], references: [user_id])
  type          String            @default("AUTH")
  access_token  String?
  refresh_token String?
  scopes        String[]
  expires_at    DateTime?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt

  @@unique([platform_id, user_id, type])
}

enum LeadStatus {
  NEW
  CONTACTED
  IN_PROGRESS
  CONVERTED
  CLOSED
}

model Lead {
  lead_id               String             @id @default(uuid())
  orgId                 String             @default("single-org")
  organization          Organization       @relation(fields: [orgId], references: [id])
  assignedToId          String?
  assignedTo            User?              @relation("AssignedTo", fields: [assignedToId], references: [user_id])
  source                String             @default("email")
  campaignId            String?
  campaign              Campaign?          @relation(fields: [campaignId], references: [id])
  name                  String
  email                 String
  phone                 String?
  company               String?
  job_title             String?
  initialConversationId String?
  conversations         LeadConversation[]
  status                LeadStatus
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt

  @@unique([orgId, email, initialConversationId], name: "org_id_email_initialConversationId_unique")
  @@index([orgId])
}

model LeadAttachment {
  id                  String            @id @default(uuid())
  conversationEmailId String
  fileName            String
  cloudinaryUrl       String
  createdAt           DateTime          @default(now())
  leadEmail           ConversationEmail @relation(fields: [conversationEmailId], references: [id], onDelete: Cascade)
}

model LeadConversation {
  id             String              @id @default(uuid())
  lead           Lead                @relation(fields: [leadId], references: [lead_id])
  leadId         String
  conversationId String
  emails         ConversationEmail[]
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
}

model ConversationEmail {
  id               String           @id @default(uuid())
  conversation     LeadConversation @relation(fields: [conversationId], references: [id])
  conversationId   String
  emailId          String           @unique
  subject          String
  body             String           @db.Text
  contentType      String
  from             Json
  to               Json
  cc               Json
  bcc              Json
  hasAttachments   Boolean
  receivedDateTime DateTime
  isIncoming       Boolean
  isThreadHead     Boolean          @default(false)
  inReplyTo        String?
  attachments      LeadAttachment[]
  created_at       DateTime         @default(now())
}

model EmailTemplate {
  id               String            @id @default(uuid())
  orgId            String
  name             String
  subject          String
  body             String
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organization     Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  autoReplyConfigs AutoReplyConfig[] @relation("TemplateToAutoReplyConfig")

  @@index([orgId])
}

model AutoReplyConfig {
  id              String        @id @default(uuid())
  orgId           String
  organization    Organization  @relation(fields: [orgId], references: [id])
  name            String
  description     String?
  triggerType     String
  triggerValue    String?
  templateId      String
  template        EmailTemplate @relation("TemplateToAutoReplyConfig", fields: [templateId], references: [id])
  mailbox         Boolean       @default(false)
  schedule        String?
  isActive        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  emailTemplateId String?
}

model SyncState {
  id           String   @id @default(uuid())
  orgId        String
  platform     String
  folderId     String
  mailboxEmail String
  deltaLink    String
  lastSyncedAt DateTime @default(now()) @updatedAt

  @@unique([orgId, mailboxEmail, folderId], name: "orgId_mailboxEmail_folderId_unique")
  @@index([orgId])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

model MarketingCampaign {
  campaign_id   String                @id @default(uuid())
  campaign_name String
  platform      MarketingPlatform?    @relation(fields: [platform_id], references: [platform_id])
  platform_id   String?
  budget        Float
  start_date    DateTime
  end_date      DateTime?
  status        CampaignStatus        @default(ACTIVE)
  performances  CampaignPerformance[]
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
}

model Campaign {
  id          String   @id @default(uuid())
  name        String
  description String?
  platform    String
  leads       Lead[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([name, platform])
}

model CampaignPerformance {
  performance_id String            @id @default(uuid())
  campaign       MarketingCampaign @relation(fields: [campaign_id], references: [campaign_id])
  campaign_id    String
  clicks         Int               @default(0)
  impressions    Int               @default(0)
  conversions    Int               @default(0)
  cost           Float
  roi            Float
  date           DateTime
  created_at     DateTime          @default(now())
}
