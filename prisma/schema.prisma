// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model Organization {
  id         String              @id @default(uuid())
  name       String
  tenantId   String?
  sharedMailbox String?
  users      User[]
  leads      Lead[]
  platforms  MarketingPlatform[]
  created_at DateTime            @default(now())
  updated_at DateTime            @updatedAt
}

model User {
  user_id         String               @id @default(uuid())
  firstName       String?
  lastName        String?
  email           String               @unique
  password        String
  orgId           String
  organization    Organization         @relation(fields: [orgId], references: [id])
  phoneNumber     String?
  street          String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  birthdate       DateTime?
  occupation      String?
  profileImage    String?
  lastLogin       DateTime?
  profilePicture  String?
  role            Role                 @default(USER)
  status          Status               @default(ACTIVE)
  refreshToken    String?
  googleId        String?              @unique
  microsoftId     String?              @unique
  assignedLeads   Lead[]               @relation("AssignedTo")
  password_tokens PasswordResetToken[]
  created_at      DateTime             @default(now())
  updated_at      DateTime             @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum SyncStatus {
  CONNECTED
  SYNCING
  FAILED
}

model MarketingPlatform {
  platform_id    String                @id @default(uuid())
  platform_name  String
  orgId          String
  organization   Organization          @relation(fields: [orgId], references: [id])
  last_sync_time DateTime?
  sync_status    SyncStatus            @default(CONNECTED)
  campaigns      Campaign[]
  credentials    PlatformCredentials[]
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt

  @@unique([orgId, platform_name])
}

model PlatformCredentials {
  credential_id String            @id @default(uuid())
  platform      MarketingPlatform @relation(fields: [platform_id], references: [platform_id])
  platform_id   String
  access_token  String?
  refresh_token String?
  scopes        String[]
  expires_at    DateTime?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
}

enum LeadStatus {
  NEW
  CONTACTED
  IN_PROGRESS
  CONVERTED
  CLOSED
}

model Lead {
  lead_id         String       @id @default(uuid())
  orgId           String
  organization    Organization @relation(fields: [orgId], references: [id])
  assignedToId    String?
  assignedTo      User?        @relation("AssignedTo", fields: [assignedToId], references: [user_id])
  source_platform String
  name            String
  email           String
  phone           String?
  company         String?
  job_title       String?
  leadEmail       LeadEmail?   @relation("LeadToEmail")
  status          LeadStatus
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  @@unique([orgId, email, source_platform], name: "org_id_email_source_platform_unique")
  @@index([orgId])
  @@index([source_platform])
}
model LeadEmail {
  id              String   @id @default(uuid())
  leadId          String   @unique 
  lead            Lead     @relation("LeadToEmail", fields: [leadId], references: [lead_id])
  subject         String
  body            String   @db.Text   
  hasAttachments  Boolean 
  receivedDateTime DateTime 
  emailId         String  
  senderName      String?  
  senderEmail     String   

  @@index([leadId])
}


model SyncState {
  id           String   @id @default(uuid())
  orgId        String
  platform     String
  folderId     String
  deltaLink    String
  lastSyncedAt DateTime @default(now()) @updatedAt

  @@unique([orgId, folderId], name: "orgId_folderId_unique")
  @@index([orgId])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

model Campaign {
  campaign_id   String                @id @default(uuid())
  campaign_name String
  platform      MarketingPlatform?    @relation(fields: [platform_id], references: [platform_id])
  platform_id   String?
  budget        Float
  start_date    DateTime
  end_date      DateTime?
  status        CampaignStatus        @default(ACTIVE)
  performances  CampaignPerformance[]
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
}
//marketing_campaign

//new model campaign (type) relation with leads
model CampaignPerformance {
  performance_id String   @id @default(uuid())
  campaign       Campaign @relation(fields: [campaign_id], references: [campaign_id])
  campaign_id    String
  clicks         Int      @default(0)
  impressions    Int      @default(0)
  conversions    Int      @default(0)
  cost           Float
  roi            Float
  date           DateTime
  created_at     DateTime @default(now())
}
