// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

model User {
  user_id            String               @id @default(uuid())
  firstName          String?
  lastName           String?
  email              String               @unique
  password           String
  phoneNumber        String?
  street             String?
  city               String?
  state              String?
  zipCode            String?
  country            String?
  birthdate          DateTime?
  occupation         String?
  profileImage       String?
  lastLogin          DateTime?
  profilePicture     String?
  role               Role                 @default(USER)
  status             Status               @default(ACTIVE)
  refreshToken       String?
  googleId           String?              @unique
  microsoftId        String?              @unique
  marketingPlatforms MarketingPlatform[]
  leads              Lead[]
  password_tokens    PasswordResetToken[]
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  user      User     @relation(fields: [user_id], references: [user_id])
  user_id   String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum SyncStatus {
  CONNECTED
  SYNCING
  FAILED
}

model MarketingPlatform {
  platform_id    String                @id @default(uuid())
  platform_name  String
  user_id        String
  user           User                  @relation(fields: [user_id], references: [user_id])
  last_sync_time DateTime?
  sync_status    SyncStatus            @default(CONNECTED)
  campaigns      Campaign[]
  credentials    PlatformCredentials[]
  created_at     DateTime              @default(now())
  updated_at     DateTime              @updatedAt

  @@unique([user_id, platform_name])
}

model PlatformCredentials {
  credential_id String            @id @default(uuid())
  platform      MarketingPlatform @relation(fields: [platform_id], references: [platform_id])
  platform_id   String
  access_token  String?
  refresh_token String?
  scopes        String[]
  expires_at    DateTime?
  created_at    DateTime          @default(now())
  updated_at    DateTime          @updatedAt
}

enum LeadStatus {
  NEW
  CONTACTED
  IN_PROGRESS
  CONVERTED
  CLOSED
}

model Lead {
  lead_id         String     @id @default(uuid())
  user_id         String
  source_platform String
  name            String
  email           String
  phone           String?
  company         String?
  job_title       String?
  status          LeadStatus
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  user User @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, email, source_platform], name: "user_id_email_source_platform_unique")
  @@index([user_id])
  @@index([source_platform])
}

model SyncState {
  id           String   @id @default(uuid())
  user_id      String
  platform     String
  folderId     String
  deltaLink    String
  lastSyncedAt DateTime @default(now()) @updatedAt

  @@unique([user_id, folderId], name: "user_id_folderId_unique")
  @@index([user_id])
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

model Campaign {
  campaign_id   String                @id @default(uuid())
  campaign_name String
  platform      MarketingPlatform?    @relation(fields: [platform_id], references: [platform_id])
  platform_id   String?
  budget        Float
  start_date    DateTime
  end_date      DateTime?
  status        CampaignStatus        @default(ACTIVE)
  performances  CampaignPerformance[]
  created_at    DateTime              @default(now())
  updated_at    DateTime              @updatedAt
}

model CampaignPerformance {
  performance_id String   @id @default(uuid())
  campaign       Campaign @relation(fields: [campaign_id], references: [campaign_id])
  campaign_id    String
  clicks         Int      @default(0)
  impressions    Int      @default(0)
  conversions    Int      @default(0)
  cost           Float
  roi            Float
  date           DateTime
  created_at     DateTime @default(now())
}
